[other users]
examples for <Raw_Data, Templates, ParseSettings>
	Build.py can copy these examples instead of my real data
	that way I don't even need to mess with checking which exists at runtime
don't hard-code income and transfer categories
finish Templates GUI

[templates]
GUI to view templates
	make table interactive to add new templates or modify existing
		done - a. button to add new, empty templates
		done - b. template view has a button to add Create items
		c. template view has a button to remove Create items
			this is maybe optional? Deleting via file edit isn't too hard
		d. template view has ability to edit:
			done - i. Name
			doneish - ii. Pattern
				need to make sure that all the different fields actually work
			doneish - iii. New
				need to make sure that all the different fields actually work
			iv. Create
		e. branch view has a button to delete templates (could also be in template view)
			this is maybe optional? Deleting via file edit isn't too hard
	for now, assume that Trunks and Branches are fixed (edit in file if needed)

[config]
use a selectable dropdown or separate window for category filter
BUG? category filter may not actually get passed through to the Model

[BUG]
income transactions count towards the Categorize limit even if they are then discarded
	ex. limit=10, use_internal=False -> 8 expenses, 2 income -> returns only 8 items
	might also happen for category filtering?

[general]
make a workflow that allows changing the data source
	next step will be creating future transactions after parsing/categorizing but before display

[Predicting]
have ways to compare predicted vs actual
	ex. "this transaction was predicted to be X, but is actually Y"
	ex. "predicted final balance was X, updated prediction is Y"
	primary use case: I made plans and decisions based on a prediction, want to know if those plans need to change
	secondary use case: sanity-check if the prediction system works

[Categorizing]
Allow deleting records via template:
	delete - special "DELETE" category (better than just empty "new" because less error-prone)
	I made logic for this, but haven't tested it

[CategorizerView]
Be able to sort columns
Also columns should have a header
	make header separate from the scrollable canvas, that way it stays at the top
	PROBLEM: then header won't have horizontal scrolling

[BucketTimeline]
Make a "slush fund" bucket. Income categories add to it, expense categories take from it
	replaces the hard-coded monthly additions

[CategorizerView]
Allow typing with autocomplete for category

[MView]
Option for hiding categories with no transactions

[Categorizing]
There should probably be a section for "overrides" at the top of the templates to manually override generic templates
For now just give auto-gens a separate file that overrides generics
FIXME need to check what the order of precedence actually is

[Categorizing]
Some way to remove duplicate templates

[Categorizing]
Some way to validate all templates

[General]
Probably a way to load the JSON schema enum to create Buckets.categories

[CategorizerView]
Make Category font match other cells (should also help with sizing)
	unless OBE

[CategorizerView]
Remove the separation between rows (how long has that been there?)

[CategorizerView]
Right now mouse wheel only scrolls when pointing at the scroll bar. Enable it for the whole window

[TransactionTimeline]
Color-code based on broad category, then either use color variation or markers to identify precise category

[TransactionTimeline]
Use matplotlip picker event handler thing to allow interrogating points (ex. what was this transaction?)

[BucketTimeline]
Make initial value for each bucket editable
	right now starts as bucket max value

[MView]
summary sheet:
	add monthly super-category timeline
	add category average bar chart
	add income/expenses/internal tables

[MView]
tracker sheets:
	separate based on super-category

[MView]
general:
	make all sheets available, either through tabs or a main menu

[Categorizing]
Make a module to convert from the old system (with categorizations and descriptions) to the new one
	This is better than doing it manually, or making something temporary
	Actually... this should probably be lower priority
	Just start fresh from some date, and ignore the old stuff for now
